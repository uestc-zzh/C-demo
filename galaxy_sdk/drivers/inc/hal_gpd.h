/**
 * Copyright (C) 2020 VeriSilicon Holdings Co., Ltd.
 * All rights reserved.
 *
 * @file hal_gpd.h
 * @brief Header of generic power domain HAL
 */

#ifndef __HAL_GPD_H__
#define __HAL_GPD_H__

/** @addtogroup GPD
 *  Generic Power Domain hal API
 *  @ingroup HAL
 *  Hardware Abstraction Layer
 *  @{
 */

#include <stdint.h>
#include <stdbool.h>

#define GPD_ID_INVALID 0xFF
#define GPD_ID_ROOT 0xFE

/**
 * @enum GpdType
 * @brief Generic power domain type definitions
 */
typedef enum GpdType {
    GPD_TYPE_BINARY, /**< Simply power on or off the module, suitable for VMP */
    GPD_TYPE_PCU_CTRL, /**< Control power domains directly using power sequences
                          generated by the PCU */
    GPD_TYPE_RAM_RETEN, /**< RAM retention */
    GPD_TYPE_COUNT /**< Number of GPD type */
} GpdType;

/**
 * @enum GpdState
 * @brief Generic power domain state definitions
 */
typedef enum GpdState {
    GPD_STATE_OFF, /**< Power down or stop */
    GPD_STATE_ON, /**< Power on or run */
    GPD_STATE_EN_RETEN, /**< Enable RAM retention mode */
    GPD_STATE_DIS_RETEN, /**< Disable RAM retention mode */
    GPD_STATE_UNKNOWN, /* Unknown state */
    GPD_STATE_COUNT /**< Number of power state */
} GpdState;

/**
 * @struct GpdHwCfg
 * @brief Struct of generic power domain hardware config
 */
typedef struct GpdHwCfg {
    uint8_t type;
    const char *name;
} GpdHwCfg;

/**
 * @struct GpdFuncs
 * @brief Prototype declaration of operations of the generic power domain
 */
typedef struct GpdFuncs {
    int (*init)(const GpdHwCfg *hw_cfg);
    int (*set_state)(const GpdHwCfg *hw_cfg, uint8_t state);
    int (*get_state)(const GpdHwCfg *hw_cfg, uint8_t *state);
    int (*pd_enable)(const GpdHwCfg *hw_cfg, bool enable);
    uint8_t (*get_parent)(const GpdHwCfg *hw_cfg);
} GpdFuncs;

/**
 * @struct GpdHw
 * @brief Generic power domain's hardware config and operations
 */
typedef struct GpdHw {
    const struct GpdHwCfg *config; /**< Hardware config of the GPD */
    const struct GpdFuncs *funcs; /**< Operations of the GPD */
} GpdHw;

/**
 * @brief Init the generic power domain
 *
 * @param gpd_hw Hardware configs and operations of the GPD
 * @param config Pointer of hardware configs
 * @return int VSD_SUCCESS for succeed, others for failure
 */
int hal_gpd_init(GpdHw *gpd_hw, const GpdHwCfg *config);

/**
 * @brief Set status of the generic power domain
 *
 * @param gpd_hw Hardware configs and operations of the GPD
 * @param state GPD status, @see GpdState
 * @return int VSD_SUCCESS for succeed, others for failure
 */
int hal_gpd_set_state(const GpdHw *gpd_hw, uint8_t state);

/**
 * @brief Get parent of the generic power domain
 *
 * @param gpd_hw Hardware configs and operations of the GPD
 * @param state Point to record GPD status, @see GpdState
 * @return int VSD_SUCCESS for succeed, others for failure
 */
int hal_gpd_get_state(const GpdHw *gpd_hw, uint8_t *state);

/**
 * @brief Get parent ID of the generic power domain
 *
 * @param gpd_hw Hardware configs and operations of the GPD
 * @return uint8_t Parent Id, @see GpdIdDef
 */
uint8_t hal_gpd_get_parent(const GpdHw *gpd_hw);

/**
 * @brief Set whether to enable generic power domain to power down
 *
 * @param gpd_hw Hardware configs and operations of the GPD
 * @param enable enable GPD to power down or not
 * @return int VSD_SUCCESS for succeed, others for failure
 */
int hal_gpd_pd_enable(const GpdHw *gpd_hw, bool enable);

/** @} */

#endif /* __HAL_GPD_H__ */
